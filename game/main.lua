local objects = {} -- table to hold all our physical objects

local function make_wall(world, x, y, width, height)
  local wall = {}
  wall.body = love.physics.newBody(world, x, y, "static")
  wall.shape = love.physics.newRectangleShape(width, height)
  wall.fixture = love.physics.newFixture(wall.body, wall.shape)

  return wall
end

local function draw_wall(wall)
  love.graphics.polygon("fill", wall.body:getWorldPoints(wall.shape:getPoints()))
end

function love.load()
  -- the height of a meter our worlds will be 64px
  love.physics.setMeter(64)
  -- create a world for the bodies to exist in with horizontal gravity
  -- of 0 and vertical gravity of 9.81
  World = love.physics.newWorld(0, 9.81*64, true)

  -- let's create the ground
  objects.ground = make_wall(World, 650/2, 650-10/2, 650, 10)
  objects.ceiling = make_wall(World, 650/2, 0, 650, 10)
  objects.wall1 = make_wall(World, 0, (650/2), 10, 650)
  objects.wall2 = make_wall(World, 650, (650/2), 10, 650)

  -- let's create a ball
  objects.ball = {}
  -- place the body in the center of the world and make it dynamic, so
  -- it can move around
  objects.ball.body = love.physics.newBody(World, 650/2, 650/2, "dynamic")
  -- the ball's shape has a radius of 20
  objects.ball.shape = love.physics.newCircleShape(20)
  -- Attach fixture to body and give it a density of 1.
  objects.ball.fixture = love.physics.newFixture(objects.ball.body,
                                                 objects.ball.shape, 1)
  objects.ball.fixture:setRestitution(1.5) -- let the ball bounce

  -- -- let's create a couple blocks to play around with
  -- objects.block1 = {}
  -- objects.block1.body = love.physics.newBody(World, 200, 550, "dynamic")
  -- objects.block1.shape = love.physics.newRectangleShape(0, 0, 50, 100)
  -- -- A higher density gives it more mass.
  -- objects.block1.fixture = love.physics.newFixture(objects.block1.body,
  --                                                  objects.block1.shape, 5)


  -- objects.block2 = {}
  -- objects.block2.body = love.physics.newBody(World, 200, 400, "dynamic")
  -- objects.block2.shape = love.physics.newRectangleShape(0, 0, 100, 50)
  -- objects.block2.fixture = love.physics.newFixture(objects.block2.body,
  --                                                  objects.block2.shape, 2)

  -- objects.block1.fixture:setRestitution(1)
  -- objects.block2.fixture:setRestitution(1)
  -- -- initial graphics setup
  -- -- set the background color to a nice blue
  love.graphics.setBackgroundColor(0.41, 0.53, 0.97)
  love.window.setMode(650, 650) -- set the window dimensions to 650 by 650
end


function love.update(dt)
  World:update(dt) -- this puts the world into motion

  -- here we are going to create some keyboard events
  -- press the right arrow key to push the ball to the right
  if love.keyboard.isDown("right") then
    objects.ball.body:applyForce(400, 0)
  -- press the left arrow key to push the ball to the left
  elseif love.keyboard.isDown("left") then
    objects.ball.body:applyForce(-400, 0)
  -- press the up arrow key to set the ball in the air
  elseif love.keyboard.isDown("up") then
    objects.ball.body:setPosition(650/2, 650/2)
    -- we must set the velocity to zero to prevent a potentially large
    -- velocity generated by the change in position
    objects.ball.body:setLinearVelocity(0, 0)
  end
end

function love.draw()
  -- set the drawing color to green for the ground
  love.graphics.setColor(0.28, 0.63, 0.05)
  -- draw a "filled in" polygon using the ground's coordinates
  draw_wall(objects.ceiling)
  draw_wall(objects.ground)
  draw_wall(objects.wall1)
  draw_wall(objects.wall2)

  -- set the drawing color to red for the ball
  love.graphics.setColor(0.76, 0.18, 0.05)
  love.graphics.circle("fill", objects.ball.body:getX(),
                       objects.ball.body:getY(), objects.ball.shape:getRadius())
end
